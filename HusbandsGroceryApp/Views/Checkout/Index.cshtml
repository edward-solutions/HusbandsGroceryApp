@model RecipeCollection

@if (Model?.Recipes != null && Model.Recipes.Any())
{
    <table class="table table-striped table-bordered">
        <thead class="table-dark">
            <tr>
                <th>Recipe Name</th>
                <th>Ingredients</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var recipe in Model.Recipes ?? new List<Recipe>())
            {
                <tr data-recipe-name="@recipe.Name">
                    <td>@recipe.Name</td>
                    <td>
                        <ul class="mb-0">
                            @foreach (var ingredient in recipe.Ingredients)
                            {
                                <li class="ingredient-cell px-2 py-1 d-flex align-items-center" contenteditable="false">
                                    <span class="flex-grow-1">@ingredient</span>
                                    <button type="button" class="btn btn-sm btn-outline-danger ms-2 delete-ingredient d-none">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </li>
                            }
                        </ul>
                    </td>
                    <td class="d-flex gap-2">
                        <button type="button" class="btn btn-sm btn-primary toggle-edit">Edit</button>
                        <button type="button" class="btn btn-sm btn-danger delete-recipe">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h1>No recipes selected!</h1>
}

@section Scripts {
    <script>
        // Toggle edit/save for recipe ingredients
        document.querySelectorAll(".toggle-edit").forEach(button => {
            button.addEventListener("click", async function () {
                const row = this.closest("tr");
                const cells = row.querySelectorAll(".ingredient-cell");
                const deleteButtons = row.querySelectorAll(".delete-ingredient");

                const isEditable = cells[0]?.getAttribute("contenteditable") === "true";

                cells.forEach(cell => {
                    cell.setAttribute("contenteditable", !isEditable);
                });

                deleteButtons.forEach(btn => {
                    btn.classList.toggle("d-none", isEditable);
                });

                this.textContent = isEditable ? "Edit" : "Save";

                if (isEditable) {
                    // Save updated data to server
                    await saveRecipesToServer();
                }
            });
        });

        // Handle delete ingredient button
        document.addEventListener("click", async function (e) {
            if (e.target.closest(".delete-ingredient")) {
                const li = e.target.closest("li");
                if (li) {
                    li.remove();
                    await saveRecipesToServer();
                }
            }
        });

        // Handle delete recipe button
        document.addEventListener("click", async function (e) {
            if (e.target.closest(".delete-recipe")) {
                const row = e.target.closest("tr");
                if (row && confirm("Are you sure you want to delete this recipe?")) {
                    row.remove();
                    await saveRecipesToServer();
                }
            }
        });

        // Save all recipes to server
        async function saveRecipesToServer() {
            const recipes = [];
            document.querySelectorAll("table tbody tr").forEach(row => {
                const name = row.dataset.recipeName;
                const ingredients = Array.from(row.querySelectorAll(".ingredient-cell span"))
                    .map(span => span.textContent);
                recipes.push({ Name: name, Ingredients: ingredients });
            });

            await fetch('/Checkout/UpdateRecipes', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ Recipes: recipes })
            });
        }
    </script>
}
